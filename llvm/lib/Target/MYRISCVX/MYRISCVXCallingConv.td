//===-- MYRISCVXCallingConv.td - Calling Conventions for MYRISCVX --*- tablegen -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===------------------------------------------------------------------------------===//
// This describes the calling conventions for MYRISCVX architecture.
//===------------------------------------------------------------------------------===//

/// CCIfSubtarget - Match if the current subtarget has a feature F.
class CCIfSubtarget<string F, CCAction A, string Invert = "">
    : CCIf<!strconcat(Invert,
                      "static_cast<const MYRISCVXSubtarget&>"
			"(State.getMachineFunction().getSubtarget()).",
                      F),
           A>;

// @{MYRISCVXCallingConv_CSR_LP32
def CSR_LP32 : CalleeSavedRegs<(add RA, SP, FP, S1, (sequence "S%u", 2, 11))>;
// @}MYRISCVXCallingConv_CSR_LP32


//===----------------------------------------------------------------------===//
// MYRISCVX LP32/STACK32 Calling Convention
//===----------------------------------------------------------------------===//

// @{ MYRISCVXCallingConv_CC_LP32_FP
// @{ MYRISCVXCallingConv_CC_LP32
def CC_LP32 : CallingConv<[
  // Promote i8/i16 arguments to i32.
  CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,

  // Integer arguments are passed in integer registers.
  CCIfType<[i32], CCAssignToReg<[A0, A1, A2, A3, A4, A5, A6, A7]>>,
  // Single Floating-Point arguments are passed in FP registers
  CCIfType<[f32], CCAssignToReg<[F10_S, F11_S, F12_S, F13_S, F14_S, F15_S, F16_S, F17_S]>>,
  // Double Floating-Point arguments are passed in FP registers
  CCIfType<[f64], CCAssignToReg<[F10_D, F11_D, F12_D, F13_D, F14_D, F15_D, F16_D, F17_D]>>,

  // Integer values get stored in stack slots that are 4 bytes in
  // size and 4-byte aligned.
  CCIfType<[i32], CCAssignToStack<4, 4>>,
  // Floating-Point values get stored in stack slots that are 4 bytes in size and 4-byte aligned.
  CCIfType<[f32], CCAssignToStack<4, 4>>,
  // Floating-Point values get stored in stack slots that are 8 bytes in size and 8-byte aligned.
  CCIfType<[f64], CCAssignToStack<8, 8>>
]>;
// @} MYRISCVXCallingConv_CC_LP32
// @} MYRISCVXCallingConv_CC_LP32_FP

// @{ MYRISCVXCallingConv_CC_STACK32
def CC_STACK32 : CallingConv<[
  // Promote i8/i16 arguments to i32.
  CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,

  // Integer values get stored in stack slots that are 4 bytes in
  // size and 4-byte aligned.
  CCIfType<[i32], CCAssignToStack<4, 4>>
]>;
// @} MYRISCVXCallingConv_CC_STACK32

//===----------------------------------------------------------------------===//
// MYRISCVX LP64/STACK64 Calling Convention
//===----------------------------------------------------------------------===//

// @{ MYRISCVXCallingConv_CC_LP64
def CC_LP64 : CallingConv<[
  // Promote i1/i8/i16 arguments to i32.
  CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,

  // Integer arguments are passed in integer registers.
  CCIfType<[i32, i64], CCAssignToReg<[A0, A1, A2, A3, A4, A5, A6, A7]>>,
  // Single Floating-Point arguments are passed in FP registers
  CCIfType<[f32], CCAssignToReg<[F10_S, F11_S, F12_S, F13_S, F14_S, F15_S, F16_S, F17_S]>>,
  // Double Floating-Point arguments are passed in FP registers
  CCIfType<[f64], CCAssignToReg<[F10_D, F11_D, F12_D, F13_D, F14_D, F15_D, F16_D, F17_D]>>,

  // Integer values get stored in stack slots that are 4 bytes in
  // size and 4-byte aligned.
  CCIfType<[i32], CCAssignToStack<4, 4>>,
  CCIfType<[i64], CCAssignToStack<8, 8>>,
  // Floating-Point values get stored in stack slots that are 4 bytes in size and 4-byte aligned.
  CCIfType<[f32], CCAssignToStack<4, 4>>,
  // Floating-Point values get stored in stack slots that are 8 bytes in size and 8-byte aligned.
  CCIfType<[f64], CCAssignToStack<8, 8>>
]>;
// @} MYRISCVXCallingConv_CC_LP64

// @{ MYRISCVXCallingConv_CC_STACK64
def CC_STACK64 : CallingConv<[
  // Promote i8/i16/i32 arguments to i64.
  CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,

  // Integer values get stored in stack slots that are 8 bytes in
  // size and 8-byte aligned.
  CCIfType<[i32], CCAssignToStack<4, 4>>,
  CCIfType<[i64], CCAssignToStack<8, 8>>
]>;
// @} MYRISCVXCallingConv_CC_STACK64


// @{ MYRISCVXCallingConv_CC_MYRISCVX
def CC_MYRISCVX : CallingConv<[
  CCIfSubtarget<"isABI_STACK64()", CCDelegateTo<CC_STACK64>>,
  CCIfSubtarget<"isABI_LP64   ()", CCDelegateTo<CC_LP64>>,
  CCIfSubtarget<"isABI_STACK32()", CCDelegateTo<CC_STACK32>>,
  CCDelegateTo<CC_LP32>
]>;
// @} MYRISCVXCallingConv_CC_MYRISCVX


//===----------------------------------------------------------------------===//
// MYRISCVX LP32/STACK32 Return Convention
//===----------------------------------------------------------------------===//

// @{MYRISCVXCallingConv_RetCC_LP32
// @{MYRISCVXCallingConv_RetCC_LP32_FP
def RetCC_LP32 : CallingConv<[
  CCIfType<[i32], CCAssignToReg<[A0, A1]>>,

  // Floating-Point are return in registers FA0, FA1
  CCIfType<[f32], CCAssignToReg<[F10_S, F11_S]>>,
  CCIfType<[f64], CCAssignToReg<[F10_D, F11_D]>>
]>;
// @}MYRISCVXCallingConv_RetCC_LP32_FP
// @}MYRISCVXCallingConv_RetCC_LP32

//===----------------------------------------------------------------------===//
// MYRISCVX LP64/STACK64 Return Convention
//===----------------------------------------------------------------------===//

// @{MYRISCVXCallingConv_RetCC_LP64
def RetCC_LP64 : CallingConv<[
  CCIfType<[i32, i64], CCAssignToReg<[A0, A1]>>,

  // Floating-Point are return in registers FA0, FA1
  CCIfType<[f32], CCAssignToReg<[F10_S, F11_S]>>,
  CCIfType<[f64], CCAssignToReg<[F10_D, F11_D]>>
]>;
// @}MYRISCVXCallingConv_RetCC_LP64

// @{MYRISCVXCallingConv_RetCC_MYRISCVX
def RetCC_MYRISCVX : CallingConv<[
  CCIfSubtarget<"is64Bit()", CCDelegateTo<RetCC_LP64>>,
  CCDelegateTo<RetCC_LP32>
]>;
// @}MYRISCVXCallingConv_RetCC_MYRISCVX
