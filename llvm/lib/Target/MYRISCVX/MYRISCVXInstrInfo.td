//===- MYRISCVXInstrInfo.td - Target Description for MYRISCVX Target -*- tablegen -*-=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains the MYRISCVX implementation of the TargetInstrInfo class.
//
//===----------------------------------------------------------------------===//

//@{ MYRISCVXInstrInfo_MYRISCVXRet
// Return
def MYRISCVXRet : SDNode<"MYRISCVXISD::Ret", SDTNone,
                         [SDNPHasChain, SDNPOptInGlue, SDNPVariadic]>;
//@} MYRISCVXInstrInfo_MYRISCVXRet

//===----------------------------------------------------------------------===//
// MYRISCVX profiles and nodes
//===----------------------------------------------------------------------===//

//@{MYRISCVXInstrInfo_Include_td
//===----------------------------------------------------------------------===//
// Instruction format superclass
//===----------------------------------------------------------------------===//
include "MYRISCVXInstrFormats.td"
//@}MYRISCVXInstrInfo_Include_td

//@{MYRISCVXInstrInfo_Operand_Definition
//===----------------------------------------------------------------------===//
// MYRISCVX Operand, Complex Patterns and Transformations Definitions.
//===----------------------------------------------------------------------===//
// @{ MYRISCVXInstrInfo_Operand_Definition_simm12
def simm12 : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isInt<12>(Imm);}]>;
// @} MYRISCVXInstrInfo_Operand_Definition_simm12
// @{ MYRISCVXInstrInfo_Operand_Definition_simm20u
def simm20u : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isInt<32>(Imm) && !(Imm & 0x0fff);}]>;
// @} MYRISCVXInstrInfo_Operand_Definition_simm20u
def simm32: Operand<XLenVT>, ImmLeaf<XLenVT, [{return isInt<32>(Imm);}]>;
//@}MYRISCVXInstrInfo_Operand_Definition


// @{MYRISCVXInstrInfo_LO12_HI20
// Transformation Function - get the lower 12 bits.
def LO12sext : SDNodeXForm<imm, [{
  return CurDAG->getTargetConstant(SignExtend64<12>(N->getZExtValue()),
                                   SDLoc(N), N->getValueType(0));
}]>;

// Transformation Function - get the higher 20 bits.
def HI20 : SDNodeXForm<imm, [{
  return getImm(N, ((N->getZExtValue()+0x800) >> 12) & 0xfffff);
}]>;
// @}MYRISCVXInstrInfo_LO12_HI20


// shamt field must fit in 5 bits.
def immZExt5 : ImmLeaf<XLenVT, [{return Imm == (Imm & 0x1f);}]>;
def shamt : Operand<i32>;

//@{ MYRISCVXInstrInfo_calltarget
def calltarget : Operand<iPTR> {
  let EncoderMethod = "getJumpTargetOpValue";
}
//@} MYRISCVXInstrInfo_calltarget

// JAL
// @{ MYRISCVXInstrInfo_brtarget20
def brtarget20    : Operand<OtherVT> {
  let EncoderMethod = "getBranch20TargetOpValue";
  let OperandType   = "OPERAND_PCREL";
}
// @} MYRISCVXInstrInfo_brtarget20


// @{ MYRISCVXInstrInfo_brtarget12
// BEQ, BNE
def brtarget12    : Operand<OtherVT> {
  let EncoderMethod = "getBranch12TargetOpValue";
  let OperandType   = "OPERAND_PCREL";
}
// @} MYRISCVXInstrInfo_brtarget12


// MYRISCVX Address Mode! SDNode frameindex could possibily be a match
// since load and store instructions from stack used it.
def addr_fi : ComplexPattern<iPTR, 1, "SelectAddrFI", [frameindex], []>;


//@{MYRISCVXInstrInfo_Instruction_Format
//@{MYRISCVXInstrInfo_ArithLogicR
//===----------------------------------------------------------------------===//
// Instructions specific format
//===----------------------------------------------------------------------===//
// Arithmetic and logical instructions with 2 register operands.
class ArithLogicR<bits<7> opcode, bits<3> funct3, bits<7>funct7,
                  string instr_asm, SDNode OpNode,
                  RegisterClass RC> :
  MYRISCVX_R<opcode, funct3, funct7, (outs RC:$rd), (ins RC:$rs1, RC:$rs2),
  !strconcat(instr_asm, "\t$rd, $rs1, $rs2"),
  [(set RC:$rd, (OpNode RC:$rs1, RC:$rs2))], IIAlu> {
    let isReMaterializable = 1;
}
//@}MYRISCVXInstrInfo_ArithLogicR


//@{MYRISCVXInstrInfo_ArithLogicI
// Arithmetic and logical instructions with 2 register operands.
class ArithLogicI<bits<7> opcode, bits<3> funct3,
                  string instr_asm, SDNode OpNode,
                  Operand Od, RegisterClass RC> :
  MYRISCVX_I<opcode, funct3, (outs RC:$rd), (ins RC:$rs1, Od:$simm12),
  !strconcat(instr_asm, "\t$rd, $rs1, $simm12"),
  [(set RC:$rd, (OpNode RC:$rs1, Od:$simm12))], IIAlu> {
    let isReMaterializable = 1;
}
//@}MYRISCVXInstrInfo_ArithLogicI


// JALR is I-type but no OpNode
class ArithLogicI_J<bits<7> opcode, bits<3> funct3,
                  string instr_asm,
                  Operand Od, RegisterClass RC> :
  MYRISCVX_I<opcode, funct3, (outs RC:$rd), (ins RC:$rs1, Od:$simm12),
  !strconcat(instr_asm, "\t$rd, $rs1, $simm12"), [], IIAlu> {
}


// Arithmetic and logical instructions with 2 register and one immediate.
class ArithLogicU<bits<7> opcode,
                  string instr_asm, RegisterClass RC, Operand Od> :
  MYRISCVX_U<opcode, (outs RC:$rd), (ins Od:$imm20),
    !strconcat(instr_asm, "\t$rd, $imm20"), [], IIAlu> {
      let isReMaterializable = 1;
}
//@}MYRISCVXInstrInfo_Instruction_Format


//@{ MYRISCVXInstrInfo_ShiftRotate
// Shifts
class ShiftRotateI<bits<7> opcode, bits<3> funct3, bit arithshift, string instr_asm,
                   SDNode OpNode, PatFrag PF, Operand ImmOpnd,
                   RegisterClass RC>:
  MYRISCVX_ISHIFT<opcode, funct3, arithshift, (outs RC:$rd), (ins RC:$rs1, ImmOpnd:$shamt),
                  !strconcat(instr_asm, "\t$rd, $rs1, $shamt"),
                  [(set GPR:$rd, (OpNode RC:$rs1, PF:$shamt))], IIAlu> {
}


// 32-bit shift instructions.
class ShiftRotateI32<bits<7> opcode, bits<3> funct3, bit arithshift, string instr_asm,
                     SDNode OpNode>:
  ShiftRotateI<opcode, funct3, arithshift, instr_asm, OpNode, immZExt5, shamt, GPR>;


class ShiftRotateR<bits<7> opcode, bits<7> funct7, bits<3> funct3,
                   bits<4> isRotate, string instr_asm,
                   SDNode OpNode, RegisterClass RC>:
  MYRISCVX_R<opcode, funct3, funct7, (outs RC:$rd), (ins RC:$rs1, RC:$rs2),
          !strconcat(instr_asm, "\t$rd, $rs1, $rs2"),
          [(set GPR:$rd, (OpNode RC:$rs1, RC:$rs2))], IIAlu> {
}
//@} MYRISCVXInstrInfo_ShiftRotate


//@{ MYRISCVXInstrInfo_jalr_variation
def JALR : ArithLogicI_J<0b1100111, 0b000, "jalr", simm12, GPR>;
def: InstAlias<"jr $rs",      (JALR ZERO, GPR:$rs, 0)>;
def: InstAlias<"jalr $rs",    (JALR RA,   GPR:$rs, 0)>;
def: InstAlias<"ret",         (JALR ZERO,      RA, 0), 2>;
//@} MYRISCVXInstrInfo_jalr_variation


// @{ MYRISCVXInstrInfo_JumpLink
// Jump and Link (Call)
let isCall = 1 in
class JumpLink<bits<7> opcode, string opstr, DAGOperand opnd> :
  MYRISCVX_J<opcode, (outs GPR:$rd), (ins opnd:$imm20), !strconcat(opstr, "\t$rd, $imm20"),
                 [], IIAlu>;
// @} MYRISCVXInstrInfo_JumpLink

// @{ MYRISCVXInstrInfo_JAL
def JAL : JumpLink<0b1101111, "jal", brtarget20>;
def : InstAlias<"j $offset",   (JAL  ZERO, brtarget20:$offset)>;
def : InstAlias<"jal $offset", (JAL  RA,   brtarget20:$offset)>;
// @} MYRISCVXInstrInfo_JAL


//@{ MYRISCVXInstrInfo_LoadMemory_StoreMemory
// Memory Load/Store
let canFoldAsLoad = 1 in
class LoadMemory<bits<7> opcode, bits<3> funct3, string instr_asm, RegisterClass RC>:
  MYRISCVX_I<opcode, funct3, (outs RC:$rd), (ins GPR:$rs1, simm12:$simm12),
     !strconcat(instr_asm, "\t$rd, ${simm12}(${rs1})"),
     [], IILoad>;

class StoreMemory<bits<7> opcode, bits<3> funct3, string instr_asm, RegisterClass RC>:
  MYRISCVX_S<opcode, funct3, (outs), (ins RC:$rs2, GPR:$rs1, simm12:$simm12),
     !strconcat(instr_asm, "\t$rs2, ${simm12}(${rs1})"),
     [], IIStore>;
//@} MYRISCVXInstrInfo_LoadMemory_StoreMemory

//===----------------------------------------------------------------------===//
// Pattern fragment for load/store
//===----------------------------------------------------------------------===//

//@{ MYRISCVXInstrInfo_AlignedLoad_AlignedStore
class AlignedLoad<PatFrag Node> :
  PatFrag<(ops node:$ptr), (Node node:$ptr), [{
  LoadSDNode *LD = cast<LoadSDNode>(N);
  return LD->getMemoryVT().getSizeInBits()/8 <= LD->getAlignment();
}]>;

class AlignedStore<PatFrag Node> :
  PatFrag<(ops node:$val, node:$ptr), (Node node:$val, node:$ptr), [{
  StoreSDNode *SD = cast<StoreSDNode>(N);
  return SD->getMemoryVT().getSizeInBits()/8 <= SD->getAlignment();
}]>;
//@} MYRISCVXInstrInfo_AlignedLoad_AlignedStore


// @{ MYRISCVXInstrInfo_SetCC
// SetCC
class SetCC_R<bits<7> opcode, bits<3> funct3, bits<7> funct7,
              string instr_asm, PatFrag cond_op,
              RegisterClass RC> :
  MYRISCVX_R<opcode, funct3, funct7, (outs RC:$rd), (ins RC:$rs1, RC:$rs2),
             !strconcat(instr_asm, "\t$rd, $rs1, $rs2"),
             [(set GPR:$rd, (cond_op RC:$rs1, RC:$rs2))], IIAlu> {
               let isReMaterializable = 1;
}


class SetCC_I<bits<7> opcode, bits<3> funct3,
              string instr_asm, PatFrag cond_op,
              Operand Od, RegisterClass RC> :
  MYRISCVX_I<opcode, funct3, (outs RC:$rd), (ins RC:$rs1, Od:$simm12),
             !strconcat(instr_asm, "\t$rd, $rs1, $simm12"),
             [(set GPR:$rd, (cond_op RC:$rs1, Od:$simm12))], IIAlu> {
               let isReMaterializable = 1;
}
// @} MYRISCVXInstrInfo_SetCC


// @{ MYRISCVXInstrInfo_CBranch12
// Branch instructions with 2 register operands.
class CBranch12<bits<7> opcode, bits<3> funct3,
                string instr_asm,
                PatFrag cond_op, RegisterClass RC> :
  MYRISCVX_B<opcode, funct3, (outs), (ins RC:$rs1, RC:$rs2, brtarget12:$imm12),
  !strconcat(instr_asm, "\t$rs1, $rs2, $imm12"),
  [], IIAlu> {
    let isBranch = 1;
    let isTerminator = 1;
}
// @} MYRISCVXInstrInfo_CBranch12


//@{ MYRISCVXInstrInfo_BEQ
def BEQ     : CBranch12<0b1100011, 0b000, "beq" , seteq,  GPR>;
def BNE     : CBranch12<0b1100011, 0b001, "bne" , setne,  GPR>;
def BLT     : CBranch12<0b1100011, 0b100, "blt" , setlt,  GPR>;
def BGE     : CBranch12<0b1100011, 0b101, "bge" , setge,  GPR>;
def BLTU    : CBranch12<0b1100011, 0b110, "bltu", setult, GPR>;
def BGEU    : CBranch12<0b1100011, 0b111, "bgeu", setuge, GPR>;
//@} MYRISCVXInstrInfo_BEQ

//@{ MYRISCVXInstrInfo_PseudoBR
let isBarrier = 1, isBranch = 1, isTerminator = 1 in
  def PseudoBR : MYRISCVXPseudo<(outs), (ins brtarget20:$simm20u), "", [(br bb:$simm20u)]>,
                 PseudoInstExpansion<(JAL ZERO, brtarget20:$simm20u)>;
//@} MYRISCVXInstrInfo_PseudoBR



//===----------------------------------------------------------------------===//
// Instruction definition
//===----------------------------------------------------------------------===//
//@{MYRISCVXInstrInfo_Basic_Definition
//===----------------------------------------------------------------------===//
// MYRISCVX Instructions
//===----------------------------------------------------------------------===//
//@{MYRISCVXInstrInfo_Arithmetic
//@{MYRISCVXInstrInfo_Arithmetic_ADDI
def ADDI : ArithLogicI<0b0010011, 0b000, "addi", add, simm12, GPR>;
//@}MYRISCVXInstrInfo_Arithmetic_ADDI
def XORI : ArithLogicI<0b0010011, 0b100, "xori", xor, simm12, GPR>;
def ORI  : ArithLogicI<0b0010011, 0b110, "ori",  or,  simm12, GPR>;
def ANDI : ArithLogicI<0b0010011, 0b111, "andi", and, simm12, GPR>;

// @{ MYRISCVXInstrInfo_AUIPC
def AUIPC: ArithLogicU<0b0010111, "auipc", GPR, simm20u>;
// @} MYRISCVXInstrInfo_AUIPC
def LUI  : ArithLogicU<0b0110111, "lui", GPR, simm20u>;
def ADD  : ArithLogicR<0b0110011, 0b000, 0b0000000, "add", add, GPR>;
def SUB  : ArithLogicR<0b0110011, 0b000, 0b0100000, "sub", sub, GPR>;
//@}MYRISCVXInstrInfo_Basic_Definition

def AND  : ArithLogicR     <0b0110011, 0b111, 0b0000000, "and", and, GPR>;
def OR   : ArithLogicR     <0b0110011, 0b110, 0b0000000, "or",  or,  GPR>;
def XOR  : ArithLogicR     <0b0110011, 0b100, 0b0000000, "xor", xor, GPR>;
//@} MYRISCVXInstrInfo_Arithmetic

// @{ MYRISCVXInstrInfo_ShiftInsts
def SLL  : ShiftRotateR<0b0110011, 0b0000000, 0b001, 0x0, "sll", shl, GPR>;
def SRL  : ShiftRotateR<0b0110011, 0b0000000, 0b101, 0x0, "srl", srl, GPR>;
def SRA  : ShiftRotateR<0b0110011, 0b0100000, 0b101, 0x0, "sra", sra, GPR>;

def SRLI : ShiftRotateI32 <0b0010011, 0b101, 0, "srli", srl>;
def SLLI : ShiftRotateI32 <0b0010011, 0b001, 0, "slli", shl>;
def SRAI : ShiftRotateI32 <0b0010011, 0b101, 1, "srai", sra>;
// @} MYRISCVXInstrInfo_ShiftInsts

// @{ MYRISCVXInstrInfo_MulDivInsts
def MUL   : ArithLogicR<0b0110011, 0b000, 0b0000001, "mul",    mul,   GPR>;
def MULH  : ArithLogicR<0b0110011, 0b001, 0b0000001, "mulh",   mulhs, GPR>;
def MULHSU: ArithLogicR<0b0110011, 0b010, 0b0000001, "mulhsu", mulhs, GPR>;
def MULHU : ArithLogicR<0b0110011, 0b011, 0b0000001, "mulhu",  mulhu, GPR>;
def DIV   : ArithLogicR<0b0110011, 0b100, 0b0000001, "div",    sdiv,  GPR>;
def DIVU  : ArithLogicR<0b0110011, 0b101, 0b0000001, "divu",   udiv,  GPR>;
def REM   : ArithLogicR<0b0110011, 0b110, 0b0000001, "rem",    srem,  GPR>;
def REMU  : ArithLogicR<0b0110011, 0b111, 0b0000001, "remu",   urem,  GPR>;
// @} MYRISCVXInstrInfo_MulDivInsts

// @{ MYRISCVXInstrInfo_SLTInsts
def SLTI  : SetCC_I<0b0010011, 0b010, "slti",  setlt,  simm12, GPR>;
def SLTIU : SetCC_I<0b0010011, 0b011, "sltiu", setult, simm12, GPR>;
def SLT   : SetCC_R<0b0110011, 0b010, 0b0000000, "slt",  setlt,  GPR>;
def SLTU  : SetCC_R<0b0110011, 0b011, 0b0000000, "sltu", setult, GPR>;
// @} MYRISCVXInstrInfo_SLTInsts

// @{ MYRISCVXInstrInfo_td_ArithInsts32
let Predicates = [IsRV64] in {
  class ArithLogicI_W<bits<7> opcode, bits<3> funct3,
                    string instr_asm, Operand Od, RegisterClass RC> :
    MYRISCVX_I<opcode, funct3, (outs RC:$rd), (ins RC:$rs1, Od:$simm12),
    !strconcat(instr_asm, "\t$rd, $rs1, $simm12"),
    [], IIAlu> {
      let isReMaterializable = 1;
  }

  class ArithLogicR_W<bits<7> opcode, bits<3> funct3, bits<7>funct7,
                    string instr_asm, RegisterClass RC> :
    MYRISCVX_R<opcode, funct3, funct7, (outs RC:$rd), (ins RC:$rs1, RC:$rs2),
    !strconcat(instr_asm, "\t$rd, $rs1, $rs2"),
    [], IIAlu> {
      let isReMaterializable = 1;
  }

  class ShiftRotateI32_W<bits<7> opcode, bits<3> funct3, bit arithshift, string instr_asm>:
    MYRISCVX_ISHIFT<opcode, funct3, arithshift, (outs GPR:$rd), (ins GPR:$rs1, shamt:$shamt),
                    !strconcat(instr_asm, "\t$rd, $rs1, $shamt"),
                    [], IIAlu> {
  }

  class ShiftRotateR_W<bits<7> opcode, bits<7> funct7, bits<3> funct3,
                     bits<4> isRotate, string instr_asm,
                     RegisterClass RC>:
    MYRISCVX_R<opcode, funct3, funct7, (outs RC:$rd), (ins RC:$rs1, RC:$rs2),
            !strconcat(instr_asm, "\t$rd, $rs1, $rs2"),
            [], IIAlu> {
  }

  def SLLIW : ShiftRotateI32_W <0b0011011, 0b001, 0, "slliw">;
  def SRLIW : ShiftRotateI32_W <0b0011011, 0b101, 0, "srliw">;
  def SRAIW : ShiftRotateI32_W <0b0011011, 0b101, 1, "sraiw">;
  def ADDIW : ArithLogicI_W    <0b0011011, 0b000, "addiw", simm12, GPR>;
  def ADDW  : ArithLogicR_W    <0b0111011, 0b000, 0b0000000, "addw", GPR>;
  def SUBW  : ArithLogicR_W    <0b0111011, 0b000, 0b0100000, "subw", GPR>;
  def SLLW  : ShiftRotateR_W   <0b0111011, 0b0000000, 0b001, 0x0, "sllw", GPR>;
  def SRLW  : ShiftRotateR_W   <0b0111011, 0b0000000, 0b101, 0x0, "srlw", GPR>;
  def SRAW  : ShiftRotateR_W   <0b0111011, 0b0100000, 0b101, 0x0, "sraw", GPR>;

// @} MYRISCVXInstrInfo_td_ArithInsts32

// @{ MYRISCVXInstrInfo_td_ArithInsts32_Pattern
  def : Pat<(sext_inreg GPR:$rs1, i32), (ADDIW GPR:$rs1, 0)>;
  def : Pat<(and GPR:$rs1, 0xffffffff), (SRLI (SLLI GPR:$rs1, 32), 32)>;

  def : Pat<(sext_inreg (add GPR:$rs1, GPR:$rs2), i32),
            (ADDW GPR:$rs1, GPR:$rs2)>;
  def : Pat<(sext_inreg (add GPR:$rs1, simm12:$imm12), i32),
            (ADDIW GPR:$rs1, simm12:$imm12)>;
  def : Pat<(sext_inreg (sub GPR:$rs1, GPR:$rs2), i32),
            (SUBW GPR:$rs1, GPR:$rs2)>;
  def : Pat<(sext_inreg (shl GPR:$rs1, shamt:$shamt), i32),
            (SLLIW GPR:$rs1, immZExt5:$shamt)>;
  def : Pat<(sra (sext_inreg GPR:$rs1, i32), shamt:$shamt),
            (SRAIW GPR:$rs1, immZExt5:$shamt)>;
// @} MYRISCVXInstrInfo_td_ArithInsts32_Pattern
}


//@{ MYRISCVXInstrInfo_RetRA
let isReturn=1, isTerminator=1, hasDelaySlot=0, isBarrier=1, hasCtrlDep=1 in
  def RetRA : MYRISCVXPseudo<(outs), (ins), "", [(MYRISCVXRet)]>;
//@} MYRISCVXInstrInfo_RetRA

//===----------------------------------------------------------------------===//
//  Arbitrary patterns that map to one or more instructions
//===----------------------------------------------------------------------===//

// @{ MYRISCVXInstrInfo_LoadStore_PatFrags
// Load/Store PatFrags.
def load_a          : AlignedLoad<load>;
def sextloadi8_a    : AlignedLoad<sextloadi8>;
def zextloadi8_a    : AlignedLoad<zextloadi8>;
def sextloadi16_a   : AlignedLoad<sextloadi16>;
def zextloadi16_a   : AlignedLoad<zextloadi16>;
def extloadi16_a    : AlignedLoad<extloadi16>;
def sextloadi32_a   : AlignedLoad<sextloadi32>;
def zextloadi32_a   : AlignedLoad<zextloadi32>;
def extloadi32_a    : AlignedLoad<extloadi32>;

def store_a         : AlignedStore<store>;
def truncstorei8_a  : AlignedStore<truncstorei8>;
def truncstorei16_a : AlignedStore<truncstorei16>;
def truncstorei32_a : AlignedStore<truncstorei32>;
// @} MYRISCVXInstrInfo_LoadStore_PatFrags


// @{ MYRISCVXInstrInfo_td_MemoryInsts
/// Aligned Load and Store Instructions
def LW  : LoadMemory <0b0000011, 0b010, "lw",  GPR>;
def SW  : StoreMemory<0b0100011, 0b010, "sw",  GPR>;
def LB  : LoadMemory <0b0000011, 0b000, "lb",  GPR>;
def LBU : LoadMemory <0b0000011, 0b100, "lbu", GPR>;
def SB  : StoreMemory<0b0100011, 0b000, "sb",  GPR>;
def LH  : LoadMemory <0b0000011, 0b001, "lh",  GPR>;
def LHU : LoadMemory <0b0000011, 0b101, "lhu", GPR>;
def SH  : StoreMemory<0b0100011, 0b001, "sh",  GPR>;
// @} MYRISCVXInstrInfo_td_MemoryInsts


// Small immediates

// @{MYRISCVXInstrInfo_Pat_simm12
def : Pat<(simm12:$in), (ADDI ZERO, simm12:$in)>;
// @}MYRISCVXInstrInfo_Pat_simm12

// @{MYRISCVXInstrInfo_Pat_simm20u
def : Pat<(simm20u:$in), (LUI (HI20 imm:$in))>;
// @}MYRISCVXInstrInfo_Pat_simm20u
// @{MYRISCVXInstrInfo_Pat_simm32
def : Pat<(simm32:$imm),
          (ADDI (LUI (HI20 imm:$imm)), (LO12sext imm:$imm))>;
// @}MYRISCVXInstrInfo_Pat_simm32


// Addr for Frame
def : Pat<(add (XLenVT addr_fi:$rs1), simm12:$simm12),
          (ADDI (XLenVT addr_fi:$rs1), simm12:$simm12)>;

// @{MYRISCVXInstrInfo_td_MemoryPattern_Define
// Memory Acccess
multiclass LoadPattern<PatFrag LoadOp, MYRISCVXInst Inst> {
  def : Pat<(LoadOp GPR:$rs1)                          , (Inst GPR:$rs1, 0)                  >;
  def : Pat<(LoadOp addr_fi:$rs1)                      , (Inst addr_fi:$rs1, 0)              >;
  def : Pat<(LoadOp (add GPR:$rs1, simm12:$simm12))    , (Inst GPR:$rs1, simm12:$simm12)     >;
  def : Pat<(LoadOp (add addr_fi:$rs1, simm12:$simm12)), (Inst addr_fi:$rs1, simm12:$simm12) >;
}

multiclass StorePattern<PatFrag StoreOp, MYRISCVXInst Inst, RegisterClass RC> {
  def : Pat<(StoreOp RC:$rs2, GPR:$rs1)                          , (Inst RC:$rs2, GPR:$rs1, 0)                 >;
  def : Pat<(StoreOp RC:$rs2, addr_fi:$rs1)                      , (Inst RC:$rs2, addr_fi:$rs1, 0)             >;
  def : Pat<(StoreOp RC:$rs2, (add GPR:$rs1, simm12:$simm12))    , (Inst RC:$rs2, GPR:$rs1, simm12:$simm12)    >;
  def : Pat<(StoreOp RC:$rs2, (add addr_fi:$rs1, simm12:$simm12)), (Inst RC:$rs2, addr_fi:$rs1, simm12:$simm12)>;
}
// @}MYRISCVXInstrInfo_td_MemoryPattern_Define

// @{ MYRISCVXInstrInfo_td_MemoryPattern_Impl
defm : LoadPattern<sextloadi8  , LB>;
defm : LoadPattern<extloadi8   , LB>;
defm : LoadPattern<sextloadi16 , LH>;
defm : LoadPattern<extloadi16  , LH>;
defm : LoadPattern<load        , LW>, Requires<[IsRV32]>;
defm : LoadPattern<zextloadi8  , LBU>;
defm : LoadPattern<zextloadi16 , LHU>;

defm : StorePattern<truncstorei8  , SB, GPR>;
defm : StorePattern<truncstorei16 , SH, GPR>;
defm : StorePattern<store         , SW, GPR>, Requires<[IsRV32]>;
// @} MYRISCVXInstrInfo_td_MemoryPattern_Impl


// @{ MYRISCVXInstrInfo_td_MemoryPattern64
let Predicates = [IsRV64] in {
  def LD  : LoadMemory <0b0000011, 0b011, "ld",  GPR>;
  def SD  : StoreMemory<0b0100011, 0b011, "sd",  GPR>;
  def LWU : LoadMemory <0b0000011, 0b110, "lwu", GPR>;

  /// Loads
  defm : LoadPattern<sextloadi32 , LW>;
  defm : LoadPattern<extloadi32  , LW>;
  defm : LoadPattern<zextloadi32 , LWU>;
  defm : LoadPattern<load        , LD>;

  /// Stores
  defm : StorePattern<truncstorei32 , SW, GPR>;
  defm : StorePattern<store         , SD, GPR>;
} // Predicates = [IsRV64]
// @} MYRISCVXInstrInfo_td_MemoryPattern64


// @{ MYRISCVXInstrInfo_SLTPatterns
// Define pattern expansions for setcc operations that aren't directly
// handled by a RISC-V instruction.
def : Pat<(seteq  GPR:$rs1, GPR:$rs2), (SLTIU (XOR GPR:$rs1, GPR:$rs2), 1)>;
def : Pat<(setne  GPR:$rs1, GPR:$rs2), (SLTU ZERO, (XOR GPR:$rs1, GPR:$rs2))>;
def : Pat<(setugt GPR:$rs1, GPR:$rs2), (SLTU GPR:$rs2, GPR:$rs1)>;
def : Pat<(setuge GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs1, GPR:$rs2), 1)>;
def : Pat<(setule GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs2, GPR:$rs1), 1)>;
def : Pat<(setgt  GPR:$rs1, GPR:$rs2), (SLT GPR:$rs2, GPR:$rs1)>;
def : Pat<(setge  GPR:$rs1, GPR:$rs2), (XORI (SLT GPR:$rs1, GPR:$rs2), 1)>;
def : Pat<(setle  GPR:$rs1, GPR:$rs2), (XORI (SLT GPR:$rs2, GPR:$rs1), 1)>;
// @} MYRISCVXInstrInfo_SLTPatterns


// @{ MYRISCVXInstrInfo_BrcondPatsSlt
// brcond for slt instruction
multiclass BrcondPatsSlt<RegisterClass RC, Instruction BEQOp, Instruction BNEOp,
                                           Instruction SLTOp, Instruction SLTuOp, Instruction SLTiOp,
                                           Instruction SLTiuOp, Register ZEROReg> {
  def : Pat<(brcond (XLenVT (setne RC:$lhs, 0)), bb:$dst),
                (BNEOp RC:$lhs, ZEROReg, bb:$dst)>;
  def : Pat<(brcond (XLenVT (seteq RC:$lhs, 0)), bb:$dst),
                (BEQOp RC:$lhs, ZEROReg, bb:$dst)>;

  def : Pat<(brcond (XLenVT (seteq RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQOp RC:$lhs, RC:$rhs, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setueq RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQOp RC:$lhs, RC:$rhs, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setne RC:$lhs, RC:$rhs)), bb:$dst),
                (BNEOp RC:$lhs, RC:$rhs, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setune RC:$lhs, RC:$rhs)), bb:$dst),
                (BNEOp RC:$lhs, RC:$rhs, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setlt RC:$lhs, RC:$rhs)), bb:$dst),
                (BNE (SLTOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setult RC:$lhs, RC:$rhs)), bb:$dst),
                (BNE (SLTuOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setgt RC:$lhs, RC:$rhs)), bb:$dst),
                (BNE (SLTOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setugt RC:$lhs, RC:$rhs)), bb:$dst),
                (BNE (SLTuOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setle RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQ (SLTOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setule RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQ (SLTuOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setge RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQ (SLTOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
  def : Pat<(brcond (XLenVT (setuge RC:$lhs, RC:$rhs)), bb:$dst),
                (BEQ (SLTuOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
  def : Pat<(brcond RC:$cond, bb:$dst),
                (BNEOp RC:$cond, ZEROReg, bb:$dst)>;
}

defm : BrcondPatsSlt<GPR, BEQ, BNE, SLT, SLTU, SLTI, SLTIU, ZERO>;
// @} MYRISCVXInstrInfo_BrcondPatsSlt
